<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             targetNamespace="http://example.com/warranty-replacement"
             id="wrc_definitions">
  <process id="wrc_process" name="Warranty-Replacement v1.3" isExecutable="true">
    <!-- Start -->
    <startEvent id="wrc_start">
      <outgoing>wrc_flow_start_to_validates</outgoing>
    </startEvent>

    <!-- Step 2: Validate loop -->
    <task id="wrc_validates_the_claim" name="validates the claim">
      <incoming>wrc_flow_start_to_validates</incoming>
      <incoming>wrc_flow_requestinfo_to_validate</incoming>
      <outgoing>wrc_flow_validates_to_xor_completeness</outgoing>
    </task>

    <sequenceFlow id="wrc_flow_start_to_validates" sourceRef="wrc_start" targetRef="wrc_validates_the_claim"/>

    <exclusiveGateway id="wrc_xor_completeness" name="Completeness?" gatewayDirection="Diverging">
      <incoming>wrc_flow_validates_to_xor_completeness</incoming>
      <outgoing>wrc_flow_incomplete_to_requestinfo</outgoing>
      <outgoing>wrc_flow_complete_to_checks_warranty</outgoing>
    </exclusiveGateway>

    <sequenceFlow id="wrc_flow_validates_to_xor_completeness" sourceRef="wrc_validates_the_claim" targetRef="wrc_xor_completeness"/>

    <task id="wrc_requests_missing_information" name="requests missing information">
      <incoming>wrc_flow_incomplete_to_requestinfo</incoming>
      <outgoing>wrc_flow_requestinfo_to_validate</outgoing>
    </task>

    <sequenceFlow id="wrc_flow_incomplete_to_requestinfo" sourceRef="wrc_xor_completeness" targetRef="wrc_requests_missing_information">
      <conditionExpression xsi:type="tFormalExpression">incomplete</conditionExpression>
    </sequenceFlow>

    <sequenceFlow id="wrc_flow_requestinfo_to_validate" sourceRef="wrc_requests_missing_information" targetRef="wrc_validates_the_claim"/>

    <!-- Step 3: Warranty eligibility -->
    <sequenceFlow id="wrc_flow_complete_to_checks_warranty" sourceRef="wrc_xor_completeness" targetRef="wrc_checks_warranty" >
      <conditionExpression xsi:type="tFormalExpression">complete</conditionExpression>
    </sequenceFlow>

    <task id="wrc_checks_warranty" name="checks warranty eligibility">
      <incoming>wrc_flow_complete_to_checks_warranty</incoming>
      <outgoing>wrc_flow_checks_to_xor_warranty</outgoing>
    </task>

    <sequenceFlow id="wrc_flow_checks_to_xor_warranty" sourceRef="wrc_checks_warranty" targetRef="wrc_xor_warranty"/>

    <exclusiveGateway id="wrc_xor_warranty" name="Within warranty?" gatewayDirection="Diverging">
      <incoming>wrc_flow_checks_to_xor_warranty</incoming>
      <outgoing>wrc_flow_out_of_warranty_to_reject</outgoing>
      <outgoing>wrc_flow_within_warranty_to_and_split</outgoing>
    </exclusiveGateway>

    <!-- Out of warranty path -->
    <task id="wrc_send_rejection_notice" name="send rejection notice">
      <incoming>wrc_flow_out_of_warranty_to_reject</incoming>
      <outgoing>wrc_flow_reject_to_end</outgoing>
    </task>

    <sequenceFlow id="wrc_flow_out_of_warranty_to_reject" sourceRef="wrc_xor_warranty" targetRef="wrc_send_rejection_notice">
      <conditionExpression xsi:type="tFormalExpression">out of warranty</conditionExpression>
    </sequenceFlow>

    <endEvent id="wrc_end_rejection" name="Rejected">
      <incoming>wrc_flow_reject_to_end</incoming>
    </endEvent>

    <sequenceFlow id="wrc_flow_reject_to_end" sourceRef="wrc_send_rejection_notice" targetRef="wrc_end_rejection"/>

    <!-- Within warranty path: parallel split -->
    <sequenceFlow id="wrc_flow_within_warranty_to_and_split" sourceRef="wrc_xor_warranty" targetRef="wrc_and_split">
      <conditionExpression xsi:type="tFormalExpression">within warranty</conditionExpression>
    </sequenceFlow>

    <parallelGateway id="wrc_and_split" name="Parallel Split" gatewayDirection="Diverging">
      <incoming>wrc_flow_within_warranty_to_and_split</incoming>
      <outgoing>wrc_flow_and_to_create_shipment</outgoing>
      <outgoing>wrc_flow_and_to_schedule_pickup</outgoing>
    </parallelGateway>

    <task id="wrc_Create_shipment_order" name="Create shipment order">
      <incoming>wrc_flow_and_to_create_shipment</incoming>
      <outgoing>wrc_flow_create_shipment_to_and_join</outgoing>
    </task>

    <sequenceFlow id="wrc_flow_and_to_create_shipment" sourceRef="wrc_and_split" targetRef="wrc_Create_shipment_order"/>

    <task id="wrc_Schedule_courier_pickup" name="Schedule courier pickup">
      <incoming>wrc_flow_and_to_schedule_pickup</incoming>
      <outgoing>wrc_flow_schedule_pickup_to_and_join</outgoing>
    </task>

    <sequenceFlow id="wrc_flow_and_to_schedule_pickup" sourceRef="wrc_and_split" targetRef="wrc_Schedule_courier_pickup"/>

    <parallelGateway id="wrc_and_join" name="Parallel Join" gatewayDirection="Converging">
      <incoming>wrc_flow_create_shipment_to_and_join</incoming>
      <incoming>wrc_flow_schedule_pickup_to_and_join</incoming>
      <outgoing>wrc_flow_andjoin_to_update_inventory</outgoing>
    </parallelGateway>

    <sequenceFlow id="wrc_flow_create_shipment_to_and_join" sourceRef="wrc_Create_shipment_order" targetRef="wrc_and_join"/>
    <sequenceFlow id="wrc_flow_schedule_pickup_to_and_join" sourceRef="wrc_Schedule_courier_pickup" targetRef="wrc_and_join"/>

    <!-- Step 5: finalize -->
    <task id="wrc_update_inventory_records" name="update inventory records">
      <incoming>wrc_flow_andjoin_to_update_inventory</incoming>
      <outgoing>wrc_flow_update_to_close</outgoing>
    </task>

    <sequenceFlow id="wrc_flow_andjoin_to_update_inventory" sourceRef="wrc_and_join" targetRef="wrc_update_inventory_records"/>

    <task id="wrc_close_the_claim" name="close the claim">
      <incoming>wrc_flow_update_to_close</incoming>
      <outgoing>wrc_flow_close_to_end_success</outgoing>
    </task>

    <sequenceFlow id="wrc_flow_update_to_close" sourceRef="wrc_update_inventory_records" targetRef="wrc_close_the_claim"/>

    <endEvent id="wrc_end_success" name="Completed">
      <incoming>wrc_flow_close_to_end_success</incoming>
    </endEvent>

    <sequenceFlow id="wrc_flow_close_to_end_success" sourceRef="wrc_close_the_claim" targetRef="wrc_end_success"/>
  </process>
</definitions>