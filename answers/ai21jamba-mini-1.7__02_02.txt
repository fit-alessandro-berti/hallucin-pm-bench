### Solution

To answer the questions, let's break them down with explanations and calculations:

### Q1: How many distinct cases are present in this fragment?

To identify the distinct cases, we count the unique `case` values in the fragment.

- **Cases present**: `C001`, `C002`, `C003`.
- **Total distinct cases**: 3.

### Q2: For case **“C002”**, list the sequence of activities in the order they occurred (use “→” as the separator).

To determine the sequence of activities for `C002`, we identify all events with `case="C002"` and arrange them chronologically based on the `time:timestamp`.

- Events for `C002`:
	- `Receive_Order`: `2025-03-01T09:15:10`
	- `Check_Stock`: `2025-03-01T09:22:55`
	- `Check_Stock`: `2025-03-01T09:25:05`
	- `Ship_Order`: `2025-03-01T10:25:40`
	- `Arrange_Delivery`: `2025-03-01T10:15:20`
- **Sequence of activities**: `Receive_Order → Check_Stock → Check_Stock → Ship_Order → Arrange_Delivery`.

### Q3: Across all cases, list every distinct activity that immediately precedes "Ship_Order".

To find the activities that immediately precede `"Ship_Order"`, we consider all events for `"Ship_Order"` and look at the `concept:name` of the immediately preceding event (based on `time:timestamp`).

- Events for `"Ship_Order"`:
	- `C001`: `Check_Stock` (2025-03-01T09:20:05 → 2025-03-01T10:05:10).
	- `C002`: `Arrange_Delivery` (2025-03-01T10:15:20 → 2025-03-01T10:25:40).
	- `C003`: `Check_Stock` (2025-03-01T09:25:05 → 2025-03-01T10:20:30).
- **Distinct activities**: `Check_Stock → Arrange_Delivery → Check_Stock` (alphabetically ordered: `Check_Stock → Arrange_Delivery → Ship_Order`).

### Final Answers:

- **Q1**: 3
- **Q2**: `Receive_Order → Check_Stock → Check_Stock → Ship_Order → Arrange_Delivery`
- **Q3**: `Check_Stock → Arrange_Delivery → Ship_Order`